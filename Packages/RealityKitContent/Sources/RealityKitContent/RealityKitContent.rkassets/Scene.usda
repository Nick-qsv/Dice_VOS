#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "CheckerP1", "CheckerP1_1"]

def Xform "Root"
{
    reorder nameChildren = ["InputTarget", "Collider", "Right_Die", "board_vc3", "Left_Die", "AudioMixGroups", "dice_mp3", "P1C_1", "P1C_2", "P1C_3", "P1C_4", "P1C_5", "P1C_6", "P1C_7", "P1C_8", "P1C_9", "P1C_10", "P1C_11", "P1C_12", "P1C_13", "P1C_14", "P1C_15", "P2C_1", "P2C_2", "P2C_3", "P2C_4", "P2C_5", "P2C_6", "P2C_7", "P2C_8", "P2C_9", "P2C_10", "P2C_11", "P2C_12", "P2C_13", "P2C_14", "P2C_15"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def RealityKitComponent "InputTarget"
    {
        uniform token info:id = "RealityKit.InputTarget"
    }

    def RealityKitComponent "Collider" (
        active = false
    )
    {
        uint group = 1
        uniform token info:id = "RealityKit.Collider"
        uint mask = 4294967295
        token type = "Default"

        def RealityKitStruct "Shape"
        {
            float3 extent = (0.30347747, 0.09546971, 0.17102796)
            token shapeType = "Box"

            def RealityKitStruct "pose"
            {
                float3 position = (0.09069009, 0.10780093, -0.007923443)
            }
        }
    }

    def "Right_Die" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 7.853981, 0)
        }
        references = @die_new_vf.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Geom", "InputTarget", "RigidBody", "MotionState", "Collider", "RightDieAud"]
        quatf xformOp:orient = (0.7055242, 0, 0.70868576, 0)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-0.21092865, 0.1495992, 0.2312491)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double restitution = 0.8
                double staticFriction = 0.5
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.30421805, 0.30421805, 0.30421805)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.00007906556, 0.00018909574, 0.000020116568)
                }
            }
        }

        over "Geom"
        {
        }

        def Xform "RightDieAud" (
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (4.000001, 4, 4.000001)
            float3 xformOp:translate = (0.058870792, 0.03531, 0.038838863)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpatialAudio"
            {
                uniform token info:id = "RealityKit.SpatialAudio"
            }
        }
    }

    def "Left_Die" (
        active = true
        references = @die_new_vf.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Geom", "InputTarget", "RigidBody", "MotionState", "Collider", "LeftDieAud"]
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-0.1889931, 0.08462928, -0.3980285)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double restitution = 0.8
                double staticFriction = 0.5
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.30421805, 0.30421805, 0.30421805)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.00007906556, 0.00018909574, 0.000020116568)
                }
            }
        }

        over "Materials"
        {
            over "Material"
            {
                token outputs:surface.connect = </Root/Left_Die/Materials/Material/surfaceShader.outputs:surface>
            }
        }

        def Xform "LeftDieAud" (
            customData = {
                float3 rotationEulerHint = (0, 3.1415927, 0)
            }
        )
        {
            quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
            float3 xformOp:scale = (4, 4, 4)
            float3 xformOp:translate = (-0.020588756, -0.0032565296, 0.011050701)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpatialAudio"
            {
                uniform token info:id = "RealityKit.SpatialAudio"
            }
        }
    }

    def RealityKitComponent "AudioMixGroups"
    {
        uniform token info:id = "RealityKit.AudioMixGroups"

        def RealityKitAudioMixGroup "MixGroup"
        {
            float gain = 0
            bool mute = 0
            float speed = 1
        }
    }

    def RealityKitAudioFile "dice_mp3"
    {
        uniform asset file = @dice-142528.mp3@
        uniform bool shouldRandomizeStartTime = 0
    }

    def "board_vc3" (
        active = true
        references = @board_vc3.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Geom", "P_4", "P_7", "P_8", "P_9", "P_10", "P_11", "P_12", "P_13", "P_14", "P_15", "P_16", "P_17", "P_18", "P_19", "P_20", "P_21", "P_22", "P_23", "P_24", "P1Bar", "P2Bar", "P_5", "P_6", "P_2", "P_3", "P_1"]
        float3 xformOp:scale = (0.25, 0.25, 0.25)
        float3 xformOp:translate = (0.453, -0.049688697, 0.054468155)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Capsule "P_4" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_4/PointMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46361, 1.1753963)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "PointMaterial"
            {
                int inputs:Invisible = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 sizeInSubgraph = (119, 53)
                            int stackingOrderInSubgraph = 0
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/board_vc3/P_4/PointMaterial/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_4/PointMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                def Shader "DefaultSurfaceShader" (
                    active = true
                )
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:emissiveColor = (1, 1, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:ior = 1
                    normal3f inputs:normal = (0, 0, 1)
                    float inputs:occlusion = 0
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }

                def Shader "PreviewSurface" (
                    active = false
                )
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-255, 105)
                    float2 ui:nodegraph:node:size = (148.5, 199)
                }
            }
        }

        def Capsule "P_7" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_7/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46361503, -0.496907)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_8" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_8/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.4636168, -0.82088614)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_9" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_9/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46361834, -1.1575129)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_9/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_10" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_10/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46362028, -1.490998)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_10/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_11" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_11/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.463623, -1.8247073)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_11/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_12" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_12/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46362442, -2.16128)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_12/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_13" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_13/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.4636286, -2.1699736)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_13/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_14" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_14/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.4636318, -1.838095)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_14/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_15" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_15/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.4636329, -1.4960158)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_15/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_16" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_16/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46363574, -1.1633754)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_16/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_17" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_17/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46363768, -0.8243041)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_17/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_18" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_18/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46363825, -0.4940753)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_18/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_19" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_19/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.4636411, 0.49839902)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_19/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_20" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_20/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46364373, 0.83312726)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_20/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_21" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_21/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46364525, 1.1730025)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_21/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_22" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["PointMaterial", "DefaultMaterial"]
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_22/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.4636473, 1.5048965)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "PointMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_22/PointMaterial/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_22/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_23" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_23/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.9596258, 0.46364945, 1.836905)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_23/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_24" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_24/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.95111835, 0.46364954, 2.167689)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_24/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P1Bar" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P1Bar/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (-0.82876515, 0.7479515, 0.0040535927)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P1Bar/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P2Bar" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P2Bar/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.6183022, 0.74712735, -0.033925533)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P2Bar/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:opacity = 0.2
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Capsule "P_5" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.1
            rel material:binding = </Root/board_vc3/P_5/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.4636114, 0.8455088)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_6" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/board_vc3/P_6/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46361262, 0.51104)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.1
            rel material:binding = </Root/board_vc3/P_2/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.4636021, 1.8456004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.1
            rel material:binding = </Root/board_vc3/P_3/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46360645, 1.5139202)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/board_vc3/P_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def Capsule "P_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.1
            rel material:binding = </Root/board_vc3/P_1/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.93333334, 0.13333336, 0.93333334)
            float3 xformOp:translate = (0.96247244, 0.46359998, 2.1855054)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                prepend token outputs:surface.connect = </Root/board_vc3/P_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoatRoughness = 0
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:ior = 1
                    float inputs:opacity = 0
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }

        def RealityKitComponent "Collider" (
            active = false
        )
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (2.5, 0.224, 5.333)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0.4488005, -0.0050222874)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 100

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double restitution = 0.2
                double staticFriction = 1
            }
        }
    }

    def "P1C_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_1/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (0.4968418, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_1/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, 0.6772221)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_1/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_2/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (0.47501442, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_2/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_3/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.5316265, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_3/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_4/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.678331, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_4/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_5" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_5/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (0.10870659, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_5/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_6" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_6/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (0.55437046, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_6/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P1C_7" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P1C_7/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (0.26988745, 0.33219796, -0.5043371)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P1C_7/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.9530847, 0.1454529, 0.14794154) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.36543572, 0.12668478, 0.10012296) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 1
                    float inputs:roughness = 0.1
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_2/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_2/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_3/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_3/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_4/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_4/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_5" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_5/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_5/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_6" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_6/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_6/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }

    def "P2C_7" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @normal_checker_v1.usdz@
    )
    {
        rel material:binding = </Root/P2C_7/Materials/defaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.08, 0.08, 0.08)
        float3 xformOp:translate = (-0.2806409, 0.32721284, -0.5006472)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/P2C_7/Materials/defaultMaterial/Shader.outputs:surface>

                over "Shader"
                {
                    color3f inputs:diffuseColor = (0.1626281, 0.21857607, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:emissiveColor = (0.2737194, 0.2737194, 0.2737194) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.4
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.3999999, 0.19999999, 1.3999999)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.22000003, 0)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            uniform token info:id = "RealityKit.RigidBody"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (1, 1, 1)
                float m_mass = 2

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 1
                double staticFriction = 1
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
        }
    }
}

